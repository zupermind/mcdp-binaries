name: Release

on:
  push:
    tags:
      - 'v*'

env:
  BINARY_NAME: mcdp-cli

jobs:
  build-and-release:
    name: Build and Release
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false 
      matrix:
        include:
          - os: ubuntu-24.04
            target: x86_64-unknown-linux-gnu
            platform: linux
            arch: amd64
          - os: ubuntu-24.04
            target: aarch64-unknown-linux-gnu
            platform: linux
            arch: arm64
          - os: ubuntu-22.04
            target: x86_64-unknown-linux-gnu
            platform: ubuntu22
            arch: amd64
          - os: ubuntu-22.04
            target: aarch64-unknown-linux-gnu
            platform: ubuntu22
            arch: arm64
          - os: macos-latest
            target: x86_64-apple-darwin
            platform: macos
            arch: amd64
          - os: macos-latest
            target: aarch64-apple-darwin
            platform: macos
            arch: arm64
          # - os: windows-latest
          #   target: x86_64-pc-windows-msvc
          #   platform: windows
          #   arch: amd64
          # - os: windows-latest
          #   target: aarch64-pc-windows-msvc
          #   platform: windows
          #   arch: arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Set CARGO_HOME
        shell: bash
        run: |
          # Create .cargo directory
          mkdir -p .cargo
          echo "CARGO_HOME=$(pwd)/.cargo" >> $GITHUB_ENV

      - name: Set global environment variables
        shell: bash
        run: |
          echo "SQLITE3_STATIC=1" >> $GITHUB_ENV
          echo "SQLX_OFFLINE=true" >> $GITHUB_ENV
          
      - name: Configure Cargo credentials
        shell: bash
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
          CARGO_REGISTRY_URL: ${{ secrets.CARGO_REGISTRY_URL }}
        run: |
          echo "CARGO_HOME: $CARGO_HOME"
          
          # Create credentials file with token
          mkdir -p "$CARGO_HOME"
          cat > "$CARGO_HOME/credentials.toml" << EOF
          [registries.zuper-registry]
          token = "${CARGO_REGISTRY_TOKEN}"
          EOF
          
          # Set appropriate permissions (skip chmod on Windows)
          if [[ "${{ runner.os }}" != "Windows" ]]; then
            chmod 600 "$CARGO_HOME/credentials.toml"
          fi
          
          # Create config file with registry URL
          cat > "$CARGO_HOME/config.toml" << EOF
          [registries.zuper-registry]
          index = "${CARGO_REGISTRY_URL}"
          [registry]
          global-credential-providers = ["cargo:token"]
          EOF
          
          echo "config.toml:"
          cat "$CARGO_HOME/config.toml"
          echo "credentials.toml:"
          cat "$CARGO_HOME/credentials.toml"
          
          # cargo +nightly -Z unstable-options config get
      
      - name: Set Cargo registry token for Windows
        if: runner.os == 'Windows'
        run: |
          echo "CARGO_REGISTRIES_ZUPER_REGISTRY_TOKEN=${{ secrets.CARGO_REGISTRY_TOKEN }}" >> $GITHUB_ENV
       
      - name: Install dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install openssl@3
          echo "OPENSSL_DIR=$(brew --prefix openssl@3)" >> $GITHUB_ENV
          echo "OPENSSL_INCLUDE_DIR=$(brew --prefix openssl@3)/include" >> $GITHUB_ENV
          echo "OPENSSL_LIB_DIR=$(brew --prefix openssl@3)/lib" >> $GITHUB_ENV

    
           

       
          
      - name: Configure SQLite for macOS targets
        if: contains(matrix.target, 'apple')
        run: |
          echo "LIBSQLITE3_SYS_USE_PKG_CONFIG=0" >> $GITHUB_ENV
          echo "MACOSX_DEPLOYMENT_TARGET=11.0" >> $GITHUB_ENV

      - name: Add Rust target
        run: rustup target add ${{ matrix.target }}
        

      - name: Install wit-bindgen-cli
        run: |
          cargo install wit-bindgen-cli
      - name: Build
       
        run: |
          if [[ "${{ matrix.target }}" == "aarch64-unknown-linux-musl" ]]; then
            cargo build --no-default-features --features python-abi3 --release --target ${{ matrix.target }}
          else
            cargo build --no-default-features --release --target ${{ matrix.target }}
          fi

      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV

      - name: Rename binary
        shell: bash
        run: |
          mkdir -p release
          if [[ "${{ matrix.platform }}" == "windows" ]]; then
            cp target/${{ matrix.target }}/release/${{ env.BINARY_NAME }}.exe release/${{ env.BINARY_NAME }}-${{ env.VERSION }}-${{ matrix.platform }}-${{ matrix.arch }}.exe
          else
            cp target/${{ matrix.target }}/release/${{ env.BINARY_NAME }} release/${{ env.BINARY_NAME }}-${{ env.VERSION }}-${{ matrix.platform }}-${{ matrix.arch }}
          fi

      - name: Generate SHA256 checksum
        shell: bash
        run: |
          cd release
          if [[ "${{ runner.os }}" == "Linux" ]]; then
            if [[ "${{ matrix.platform }}" == "windows" ]]; then
              sha256sum ${{ env.BINARY_NAME }}-${{ env.VERSION }}-${{ matrix.platform }}-${{ matrix.arch }}.exe > ${{ env.BINARY_NAME }}-${{ env.VERSION }}-${{ matrix.platform }}-${{ matrix.arch }}.exe.sha256
            else
              sha256sum ${{ env.BINARY_NAME }}-${{ env.VERSION }}-${{ matrix.platform }}-${{ matrix.arch }} > ${{ env.BINARY_NAME }}-${{ env.VERSION }}-${{ matrix.platform }}-${{ matrix.arch }}.sha256
            fi
          elif [[ "${{ runner.os }}" == "macOS" ]]; then
            if [[ "${{ matrix.platform }}" == "windows" ]]; then
              shasum -a 256 ${{ env.BINARY_NAME }}-${{ env.VERSION }}-${{ matrix.platform }}-${{ matrix.arch }}.exe > ${{ env.BINARY_NAME }}-${{ env.VERSION }}-${{ matrix.platform }}-${{ matrix.arch }}.exe.sha256
            else
              shasum -a 256 ${{ env.BINARY_NAME }}-${{ env.VERSION }}-${{ matrix.platform }}-${{ matrix.arch }} > ${{ env.BINARY_NAME }}-${{ env.VERSION }}-${{ matrix.platform }}-${{ matrix.arch }}.sha256
            fi
          elif [[ "${{ runner.os }}" == "Windows" ]]; then
            certutil -hashfile ${{ env.BINARY_NAME }}-${{ env.VERSION }}-${{ matrix.platform }}-${{ matrix.arch }}.exe SHA256 | findstr /v "hash" > ${{ env.BINARY_NAME }}-${{ env.VERSION }}-${{ matrix.platform }}-${{ matrix.arch }}.exe.sha256
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.BINARY_NAME }}-${{ env.VERSION }}-${{ matrix.platform }}-${{ matrix.arch }}
          path: release/
          if-no-files-found: error

  create-release:
    name: Create Release
    needs: build-and-release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release

      - name: Prepare assets for release
        run: |
          mkdir -p assets
          find release -type f -exec cp {} assets/ \;

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: ./assets/*
          draft: false
          prerelease: false
          generate_release_notes: true 