name: Release

on:
  push:
    tags:
      - 'v*'

env:
  BINARY_NAME: mcdp-tool

jobs:
  build-and-release:
    name: Build and Release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            platform: linux
            arch: amd64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            platform: linux
            arch: arm64
          - os: macos-latest
            target: x86_64-apple-darwin
            platform: macos
            arch: amd64
          - os: macos-latest
            target: aarch64-apple-darwin
            platform: macos
            arch: arm64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            platform: windows
            arch: amd64
          - os: windows-latest
            target: aarch64-pc-windows-msvc
            platform: windows
            arch: arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libssl-dev

      - name: Install dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install openssl@3
          echo "OPENSSL_DIR=$(brew --prefix openssl@3)" >> $GITHUB_ENV
          echo "OPENSSL_INCLUDE_DIR=$(brew --prefix openssl@3)/include" >> $GITHUB_ENV
          echo "OPENSSL_LIB_DIR=$(brew --prefix openssl@3)/lib" >> $GITHUB_ENV

      - name: Install cross-compilation tools (Linux ARM only)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Setup Windows ARM64 cross-compilation
        if: matrix.target == 'aarch64-pc-windows-msvc'
        run: |
          rustup target add aarch64-pc-windows-msvc

      - name: Configure Cargo for cross-compilation (Linux ARM only)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          mkdir -p .cargo
          cat > .cargo/config.toml << EOF
          [target.aarch64-unknown-linux-gnu]
          linker = "aarch64-linux-gnu-gcc"
          EOF
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "CXX_aarch64_unknown_linux_gnu=aarch64-linux-gnu-g++" >> $GITHUB_ENV

      - name: Add Rust target
        run: rustup target add ${{ matrix.target }}

      - name: Build
        run: cargo build --no-default-features --release --target ${{ matrix.target }}

      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV

      - name: Rename binary
        shell: bash
        run: |
          mkdir -p release
          if [[ "${{ matrix.platform }}" == "windows" ]]; then
            cp target/${{ matrix.target }}/release/${{ env.BINARY_NAME }}.exe release/${{ env.BINARY_NAME }}-${{ env.VERSION }}-${{ matrix.platform }}-${{ matrix.arch }}.exe
          else
            cp target/${{ matrix.target }}/release/${{ env.BINARY_NAME }} release/${{ env.BINARY_NAME }}-${{ env.VERSION }}-${{ matrix.platform }}-${{ matrix.arch }}
          fi

      - name: Generate SHA256 checksum
        shell: bash
        run: |
          cd release
          if [[ "${{ runner.os }}" == "Linux" ]]; then
            if [[ "${{ matrix.platform }}" == "windows" ]]; then
              sha256sum ${{ env.BINARY_NAME }}-${{ env.VERSION }}-${{ matrix.platform }}-${{ matrix.arch }}.exe > ${{ env.BINARY_NAME }}-${{ env.VERSION }}-${{ matrix.platform }}-${{ matrix.arch }}.exe.sha256
            else
              sha256sum ${{ env.BINARY_NAME }}-${{ env.VERSION }}-${{ matrix.platform }}-${{ matrix.arch }} > ${{ env.BINARY_NAME }}-${{ env.VERSION }}-${{ matrix.platform }}-${{ matrix.arch }}.sha256
            fi
          elif [[ "${{ runner.os }}" == "macOS" ]]; then
            if [[ "${{ matrix.platform }}" == "windows" ]]; then
              shasum -a 256 ${{ env.BINARY_NAME }}-${{ env.VERSION }}-${{ matrix.platform }}-${{ matrix.arch }}.exe > ${{ env.BINARY_NAME }}-${{ env.VERSION }}-${{ matrix.platform }}-${{ matrix.arch }}.exe.sha256
            else
              shasum -a 256 ${{ env.BINARY_NAME }}-${{ env.VERSION }}-${{ matrix.platform }}-${{ matrix.arch }} > ${{ env.BINARY_NAME }}-${{ env.VERSION }}-${{ matrix.platform }}-${{ matrix.arch }}.sha256
            fi
          elif [[ "${{ runner.os }}" == "Windows" ]]; then
            certutil -hashfile ${{ env.BINARY_NAME }}-${{ env.VERSION }}-${{ matrix.platform }}-${{ matrix.arch }}.exe SHA256 | findstr /v "hash" > ${{ env.BINARY_NAME }}-${{ env.VERSION }}-${{ matrix.platform }}-${{ matrix.arch }}.exe.sha256
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.BINARY_NAME }}-${{ env.VERSION }}-${{ matrix.platform }}-${{ matrix.arch }}
          path: release/
          if-no-files-found: error

  create-release:
    name: Create Release
    needs: build-and-release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release

      - name: Prepare assets for release
        run: |
          mkdir -p assets
          find release -type f -exec cp {} assets/ \;

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: ./assets/*
          draft: false
          prerelease: false
          generate_release_notes: true 